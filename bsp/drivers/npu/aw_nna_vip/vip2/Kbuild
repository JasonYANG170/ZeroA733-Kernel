# License-Identifier: GPL-2.0
# Linux build file for viplite kernel space
#


MODULE_NAME ?= vipcore

export USE_LINUX_PLATFORM_DEVICE=1
export AUTO_CORRECT_CONFLICTS=1
export PLATFORM_NAME=allwinner


EXTRA_CFLAGS += -Werror -Wno-unused-function
EXTRA_CFLAGS += -I$(srctree)/$(src) \
				-I$(srctree)/$(src)/inc \
				-I$(srctree)/$(src)/memory \
				-I$(srctree)/$(src)/os/linux \
				-I$(srctree)/$(src)/os/linux/allocator \
				-I$(srctree)/$(src)/os/linux/platform/$(PLATFORM_NAME) \
				-I$(srctree)/$(src)/task

OBJS := vip_drv_interface.o \
        vip_drv_hardware.o \
        vip_drv_device.o \
        vip_drv_context.o \
        vip_drv_debug.o \
        vip_drv_util.o \
        vip_drv_pm.o \
        memory/vip_drv_mem_heap.o \
        memory/vip_drv_mmu.o \
        memory/vip_drv_video_memory.o \
        memory/vip_drv_mem_allocator.o \
        task/vip_drv_task_descriptor.o \
        task/vip_drv_task_schedule.o \
        task/vip_drv_task_parallel_async.o \
        task/vip_drv_task_serial_sync.o \
        task/vip_drv_task_parallel_sync.o \
        task/vip_drv_task_single.o \
        task/vip_drv_task_common.o \
        task/vip_drv_task_debug.o \
        os/linux/vip_drv_device_driver.o \
        os/linux/vip_drv_os.o \
        os/linux/vip_drv_os_debug.o \
        os/linux/allocator/vip_drv_mem_allocator_common.o \
        os/linux/allocator/vip_drv_mem_allocator_heap_reserved.o \
        os/linux/allocator/vip_drv_mem_allocator_heap_exclusive.o \
        os/linux/allocator/vip_drv_mem_allocator_continue.o \
        os/linux/allocator/vip_drv_mem_allocator_segment_continue.o \
        os/linux/allocator/vip_drv_mem_allocator_gfp.o \
        os/linux/allocator/vip_drv_mem_allocator_cma.o \
        os/linux/allocator/vip_drv_mem_allocator_ion.o \
        os/linux/allocator/vip_drv_mem_allocator_wrap_user_physical.o \
        os/linux/allocator/vip_drv_mem_allocator_wrap_user_memory.o \
        os/linux/allocator/vip_drv_mem_allocator_wrap_dma_buf.o

#platform
ifeq ($(CONFIG_NPU_USER_IOMMU), )
export NPU_USER_IOMMU=0
else
export NPU_USER_IOMMU=1
endif


ifeq ($(SOC_CONFIG), )
OBJS += os/linux/platform/$(PLATFORM_NAME)/vip_drv_device_platform.o
else
OBJS += os/linux/platform/$(PLATFORM_NAME)/vip_drv_device_platform_$(SOC_CONFIG).o
endif


#Include platform config if exists.
-include $(srctree)/$(src)/os/linux/platform/$(PLATFORM_NAME)/platform.mk

ifeq ($(NPU_USER_IOMMU), 1)
	OBJS+= $(srctree)/$(src)/os/linux/platform/$(PLATFORM_NAME)/gc_vip_kernel_ion.o
endif

#NOTE:
#please configure CONFIG_DEBUG_INFO is not set if want to build vipcore.ko release version.


.PHONY: all clean install

# Define targets.
all:
	@$(MAKE) V=$(V) ARCH=$(ARCH_TYPE) -C $(KERNEL_DIR) M=`pwd` modules

clean:
	@rm -rf $(OBJS)
	@rm -rf modules.order Module.symvers .tmp_versions $(MODULE_NAME).mod.o $(MODULE_NAME).mod.c $(MODULE_NAME).ko $(MODULE_NAME).o
	@find $(VIPLITE_ROOT) -name "*.o" | xargs rm -f
	@find $(VIPLITE_ROOT) -name "*.d" | xargs rm -f
	@find $(VIPLITE_ROOT) -name "*.mod" | xargs rm -f
	@find $(VIPLITE_ROOT) -name ".*.cmd" | xargs rm -f
	@rm -f $(SDK_DIR)/drivers/$(MODULE_NAME).ko

install: all
	@mkdir -p $(SDK_DIR)/drivers
	@cp $(MODULE_NAME).ko $(SDK_DIR)/drivers


EXTRA_CFLAGS += -DLINUX -DDRIVER

# NPU USE IOMMU
ifeq ($(NPU_USER_IOMMU), 1)
EXTRA_CFLAGS += -DNPU_USER_IOMMU=1
else ifeq ($(NPU_USER_IOMMU), 0)
EXTRA_CFLAGS += -DNPU_USER_IOMMU=0
endif

ifeq ($(FLAREON),1)
EXTRA_CFLAGS += -DFLAREON
endif

ifeq ($(DEBUG), 1)
EXTRA_CFLAGS += -DDBG=1 -DDEBUG -D_DEBUG -DvpmdENABLE_DEBUG_LOG=4
else
EXTRA_CFLAGS += -DDBG=0
endif

ifeq ($(USE_LINUX_PCIE_DEVICE), 1)
EXTRA_CFLAGS += -DUSE_LINUX_PCIE_DEVICE
ifneq ($(REGISTER_PCIE_DRIVER), )
EXTRA_CFLAGS += -DvpmdREGISTER_PCIE_DRIVER=$(REGISTER_PCIE_DRIVER)
endif
else ifeq ($(USE_LINUX_PLATFORM_DEVICE), 1)
EXTRA_CFLAGS += -DUSE_LINUX_PLATFORM_DEVICE
endif

ifneq ($(FPGA_BUILD), )
EXTRA_CFLAGS += -DvpmdFPGA_BUILD=$(FPGA_BUILD)
endif

ifeq ($(USE_LINUX_CMA), 1)
EXTRA_CFLAGS += -DUSE_LINUX_CMA
endif

ifeq ($(USE_LINUX_MEM_ION), 1)
EXTRA_CFLAGS += -DUSE_LINUX_MEM_ION
endif

ifneq ($(USE_AGENT), )
EXTRA_CFLAGS += -DvpmdENABLE_USE_AGENT_TRIGGER=$(USE_AGENT)
endif


ifeq ($(NPU_USER_IOMMU), 1)
	ifeq ($(DISABLE_MMU), 1)
	EXTRA_CFLAGS += -DvpmdENABLE_MMU=0
	endif
else
	ifneq ($(ENABLE_MMU), )
	EXTRA_CFLAGS += -DvpmdENABLE_MMU=$(ENABLE_MMU)
	endif
endif

ifneq ($(ENABLE_40BITVA), )
EXTRA_CFLAGS += -DvpmdENABLE_40BITVA=$(ENABLE_40BITVA)
endif

ifeq ($(DISABLE_CREATE_BUF_FD),1)
EXTRA_CFLAGS += -DvpmdENABLE_CREATE_BUF_FD=0
endif

ifneq ($(ENABLE_SYS_MEMORY_HEAP), )
EXTRA_CFLAGS += -DvpmdENABLE_SYS_MEMORY_HEAP=$(ENABLE_SYS_MEMORY_HEAP)
endif

ifneq ($(ENABLE_VIDEO_MEMORY_HEAP), )
EXTRA_CFLAGS += -DvpmdENABLE_VIDEO_MEMORY_HEAP=$(ENABLE_VIDEO_MEMORY_HEAP)
endif

ifneq ($(ENABLE_VIDEO_MEMORY_DYNAMIC), )
EXTRA_CFLAGS += -DvpmdENABLE_VIDEO_MEMORY_DYNAMIC=$(ENABLE_VIDEO_MEMORY_DYNAMIC)
endif

ifneq ($(POWER_OFF_TIMEOUT), )
EXTRA_CFLAGS += -DvpmdPOWER_OFF_TIMEOUT=$(POWER_OFF_TIMEOUT)
endif

ifneq ($(HARDWARE_RECOVERY), )
EXTRA_CFLAGS += -DvpmdENABLE_RECOVERY=$(HARDWARE_RECOVERY)
endif

ifneq ($(NODE_MEMORY_IN_HEAP), )
EXTRA_CFLAGS += -DvpmdNODE_MEMORY_IN_HEAP=$(NODE_MEMORY_IN_HEAP)
endif

ifneq ($(AUTO_CORRECT_CONFLICTS), )
EXTRA_CFLAGS += -DvpmdAUTO_CORRECT_CONFLICTS=$(AUTO_CORRECT_CONFLICTS)
endif

ifneq ($(ENABLE_MULTIPLE_TASK), )
EXTRA_CFLAGS += -DvpmdENABLE_MULTIPLE_TASK=$(ENABLE_MULTIPLE_TASK)
endif

ifneq ($(ENABLE_RESERVE_PHYSICAL), )
EXTRA_CFLAGS += -DvpmdENABLE_RESERVE_PHYSICAL=$(ENABLE_RESERVE_PHYSICAL)
endif

ifneq ($(LIUNX_USE_MEM_WRITE_COMBINE), )
EXTRA_CFLAGS += -DLIUNX_USE_MEM_WRITE_COMBINE
endif

ifneq ($(ENABLE_SUSPEND_RESUME), )
EXTRA_CFLAGS += -DvpmdENABLE_SUSPEND_RESUME=$(ENABLE_SUSPEND_RESUME)
endif

ifneq ($(ENABLE_REDUCE_MEMORY), )
EXTRA_CFLAGS += -DvpmdENABLE_REDUCE_MEMORY=$(ENABLE_REDUCE_MEMORY)
endif

ifneq ($(ENABLE_POLLING), )
EXTRA_CFLAGS += -DvpmdENABLE_POLLING=$(ENABLE_POLLING)
endif

ifneq ($(ENABLE_PREEMPTION), )
EXTRA_CFLAGS += -DvpmdENABLE_PREEMPTION=$(ENABLE_PREEMPTION)
endif

ifneq ($(ENABLE_CHECKSUM), )
EXTRA_CFLAGS += -DvpmdENABLE_CHECKSUM=$(ENABLE_CHECKSUM)
endif

ifneq ($(HARDWARE_BYPASS_MODE), )
EXTRA_CFLAGS += -DvpmdHARDWARE_BYPASS_MODE=$(HARDWARE_BYPASS_MODE)
endif

ifneq ($(PRELOAD_COEFF), )
EXTRA_CFLAGS += -DvpmdPRELOAD_COEFF=$(PRELOAD_COEFF)
endif

ifneq ($(DUMP_NBG_RESOURCE), )
EXTRA_CFLAGS += -DvpmdDUMP_NBG_RESOURCE=$(DUMP_NBG_RESOURCE)
endif

ifneq ($(ENABLE_FUSA), )
EXTRA_CFLAGS += -DvpmdENABLE_FUSA=$(ENABLE_FUSA)
OBJS += vip_drv_fusa.o
endif

ifneq ($(TASK_CMD_DUMP), )
EXTRA_CFLAGS += -DvpmdTASK_CMD_DUMP=$(TASK_CMD_DUMP)
endif

ifneq ($(ENABLE_LAYER_DUMP), )
EXTRA_CFLAGS += -DvpmdENABLE_LAYER_DUMP=$(ENABLE_LAYER_DUMP)
endif

ifneq ($(ENABLE_NPD), )
EXTRA_CFLAGS += -DvpmdENABLE_NPD=$(ENABLE_NPD)
endif

obj-$(CONFIG_AW_NNA_VIP) = $(MODULE_NAME).o

$(MODULE_NAME)-objs  = $(OBJS)


#only for checking driver build option
-include $(srctree)/$(src)/check.Kbuild
